# FRONTEND AI ROLE ANALYSIS - IMPLEMENTATION GUIDE
# StudentMate Two-Layer Idea Sharing Workflow

## WORKFLOW OVERVIEW
Page 1: Title + Description Input → "Shape Your Idea" Button
Page 2: Metadata + Roles Field + "Analyze with AI" Button

## CORE IMPLEMENTATION STRUCTURE

### 1. API SERVICE LAYER

#### AI Service (src/services/aiService.js)
```javascript
import axios from 'axios';

const API_BASE = process.env.REACT_APP_API_URL || 'http://localhost:2000';

const apiClient = axios.create({
  baseURL: API_BASE,
  withCredentials: true, // Important for cookie auth
  timeout: 30000
});

class AIService {
  async analyzeRoles(description) {
    try {
      const response = await apiClient.post('/api/ai/analyze-roles', {
        description: description.trim()
      });
      return response.data.data.roles || [];
    } catch (error) {
      if (error.response?.status === 429) {
        throw new Error('Rate limit exceeded. Please wait.');
      }
      throw new Error(error.response?.data?.message || 'AI analysis failed');
    }
  }
}

export default new AIService();
```

### 2. CUSTOM HOOKS

#### AI Analysis Hook (src/hooks/useAIAnalysis.js)
```javascript
import { useState } from 'react';
import aiService from '../services/aiService';

export const useAIAnalysis = () => {
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [error, setError] = useState(null);

  const analyzeRoles = async (description) => {
    if (!description?.trim()) {
      setError('Description required for analysis');
      return [];
    }

    setIsAnalyzing(true);
    setError(null);

    try {
      const roles = await aiService.analyzeRoles(description);
      return roles;
    } catch (err) {
      setError(err.message);
      return [];
    } finally {
      setIsAnalyzing(false);
    }
  };

  return { analyzeRoles, isAnalyzing, error, clearError: () => setError(null) };
};
```

#### Form Management Hook (src/hooks/useIdeaForm.js)
```javascript
import { useState } from 'react';

export const useIdeaForm = () => {
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    targetAudience: '',
    marketAlternatives: '',
    problemStatement: '',
    uniqueValue: '',
    neededRoles: [],
    privacy: 'Public'
  });
  
  const [currentStep, setCurrentStep] = useState(1);
  const [errors, setErrors] = useState({});

  const updateField = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    if (errors[field]) setErrors(prev => ({ ...prev, [field]: null }));
  };

  const updateRoles = (roles) => {
    setFormData(prev => ({ ...prev, neededRoles: roles }));
  };

  const nextStep = () => {
    if (validateCurrentStep()) {
      setCurrentStep(2);
      return true;
    }
    return false;
  };

  const validateCurrentStep = () => {
    const newErrors = {};
    if (currentStep === 1) {
      if (!formData.title.trim()) newErrors.title = 'Title required';
      if (!formData.description.trim()) newErrors.description = 'Description required';
    }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  return {
    formData, currentStep, errors,
    updateField, updateRoles, nextStep,
    prevStep: () => setCurrentStep(1)
  };
};
```

### 3. REACT COMPONENTS

#### Main Container (src/components/IdeaFormContainer.jsx)
```javascript
import React from 'react';
import { useIdeaForm } from '../hooks/useIdeaForm';
import IdeaBasicForm from './IdeaBasicForm';
import IdeaMetadataForm from './IdeaMetadataForm';

const IdeaFormContainer = () => {
  const formHook = useIdeaForm();
  const { currentStep } = formHook;

  return (
    <div className="idea-form-container">
      {/* Progress Indicator */}
      <div className="progress-steps">
        <div className={`step ${currentStep >= 1 ? 'active' : ''}`}>
          1. Basic Info
        </div>
        <div className={`step ${currentStep >= 2 ? 'active' : ''}`}>
          2. Details & AI
        </div>
      </div>

      {/* Form Content */}
      {currentStep === 1 ? (
        <IdeaBasicForm {...formHook} />
      ) : (
        <IdeaMetadataForm {...formHook} />
      )}
    </div>
  );
};

export default IdeaFormContainer;
```

#### Page 1 - Basic Form (src/components/IdeaBasicForm.jsx)
```javascript
import React from 'react';

const IdeaBasicForm = ({ formData, errors, updateField, nextStep }) => {
  const handleSubmit = (e) => {
    e.preventDefault();
    nextStep();
  };

  return (
    <form onSubmit={handleSubmit} className="idea-form">
      <h2>Share Your Idea</h2>
      
      <div className="form-group">
        <label>Idea Title *</label>
        <input
          type="text"
          value={formData.title}
          onChange={(e) => updateField('title', e.target.value)}
          placeholder="Enter your idea title..."
          className={errors.title ? 'error' : ''}
        />
        {errors.title && <span className="error">{errors.title}</span>}
      </div>

      <div className="form-group">
        <label>Idea Description *</label>
        <textarea
          value={formData.description}
          onChange={(e) => updateField('description', e.target.value)}
          placeholder="Describe your idea in detail..."
          rows={6}
          className={errors.description ? 'error' : ''}
        />
        {errors.description && <span className="error">{errors.description}</span>}
        <small>This will be analyzed by AI for role suggestions</small>
      </div>

      <div className="form-actions">
        <button type="submit" className="btn-primary">
          Shape Your Idea →
        </button>
      </div>
    </form>
  );
};

export default IdeaBasicForm;
```

#### AI Role Analyzer (src/components/AIRoleAnalyzer.jsx)
```javascript
import React, { useState } from 'react';
import { useAIAnalysis } from '../hooks/useAIAnalysis';

const AIRoleAnalyzer = ({ description, currentRoles, onRolesUpdate }) => {
  const { analyzeRoles, isAnalyzing, error } = useAIAnalysis();
  const [suggestedRoles, setSuggestedRoles] = useState([]);
  const [showResults, setShowResults] = useState(false);

  const handleAnalyze = async () => {
    const roles = await analyzeRoles(description);
    if (roles.length > 0) {
      setSuggestedRoles(roles);
      setShowResults(true);
    }
  };

  const applyRoles = () => {
    const uniqueRoles = [...new Set([...currentRoles, ...suggestedRoles])];
    onRolesUpdate(uniqueRoles);
    setShowResults(false);
  };

  return (
    <div className="ai-analyzer">
      <button
        type="button"
        onClick={handleAnalyze}
        disabled={isAnalyzing || !description?.trim()}
        className="btn-ai"
      >
        {isAnalyzing ? '🤖 Analyzing...' : '🤖 Analyze with AI'}
      </button>

      {error && <div className="error-message">{error}</div>}

      {showResults && (
        <div className="ai-results">
          <h4>AI Suggested Roles:</h4>
          <div className="suggested-roles">
            {suggestedRoles.map((role, index) => (
              <span key={index} className="role-tag suggested">
                {role}
              </span>
            ))}
          </div>
          <div className="result-actions">
            <button onClick={applyRoles} className="btn-success">
              Add All Roles
            </button>
            <button onClick={() => setShowResults(false)} className="btn-secondary">
              Cancel
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default AIRoleAnalyzer;
```

#### Page 2 - Metadata Form (src/components/IdeaMetadataForm.jsx)
```javascript
import React from 'react';
import AIRoleAnalyzer from './AIRoleAnalyzer';

const IdeaMetadataForm = ({ formData, updateField, updateRoles, prevStep }) => {
  const handleRoleInput = (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      const newRole = e.target.value.trim();
      if (newRole && !formData.neededRoles.includes(newRole)) {
        updateRoles([...formData.neededRoles, newRole]);
        e.target.value = '';
      }
    }
  };

  const removeRole = (index) => {
    const updated = formData.neededRoles.filter((_, i) => i !== index);
    updateRoles(updated);
  };

  return (
    <form className="idea-form">
      <h2>Shape Your Idea</h2>

      <div className="form-row">
        <div className="form-group">
          <label>Target Audience</label>
          <input
            type="text"
            value={formData.targetAudience}
            onChange={(e) => updateField('targetAudience', e.target.value)}
            placeholder="Who is your target audience?"
          />
        </div>
        
        <div className="form-group">
          <label>Market Alternatives</label>
          <input
            type="text"
            value={formData.marketAlternatives}
            onChange={(e) => updateField('marketAlternatives', e.target.value)}
            placeholder="Existing alternatives?"
          />
        </div>
      </div>

      <div className="form-group">
        <label>Problem Statement</label>
        <textarea
          value={formData.problemStatement}
          onChange={(e) => updateField('problemStatement', e.target.value)}
          placeholder="What problem does this solve?"
          rows={3}
        />
      </div>

      <div className="form-group">
        <label>Unique Value</label>
        <textarea
          value={formData.uniqueValue}
          onChange={(e) => updateField('uniqueValue', e.target.value)}
          placeholder="What makes it unique?"
          rows={3}
        />
      </div>

      {/* ROLES SECTION WITH AI */}
      <div className="form-group roles-section">
        <label>Needed Roles</label>
        
        <input
          type="text"
          placeholder="Type role and press Enter..."
          onKeyDown={handleRoleInput}
          className="role-input"
        />

        {/* Current Roles */}
        {formData.neededRoles.length > 0 && (
          <div className="current-roles">
            {formData.neededRoles.map((role, index) => (
              <span key={index} className="role-tag">
                {role}
                <button type="button" onClick={() => removeRole(index)}>×</button>
              </span>
            ))}
          </div>
        )}

        {/* AI ANALYZER COMPONENT */}
        <AIRoleAnalyzer
          description={formData.description}
          currentRoles={formData.neededRoles}
          onRolesUpdate={updateRoles}
        />
      </div>

      <div className="form-actions">
        <button type="button" onClick={prevStep} className="btn-secondary">
          ← Back
        </button>
        <button type="submit" className="btn-primary">
          Create Idea
        </button>
      </div>
    </form>
  );
};

export default IdeaMetadataForm;
```

### 4. ESSENTIAL CSS STYLES

#### Basic Styling (src/styles/IdeaForm.css)
```css
.idea-form-container {
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
}

.progress-steps {
  display: flex;
  justify-content: center;
  margin-bottom: 30px;
}

.step {
  padding: 10px 20px;
  background: #f5f5f5;
  margin: 0 10px;
  border-radius: 5px;
}

.step.active {
  background: #007bff;
  color: white;
}

.form-group {
  margin-bottom: 20px;
}

.form-group label {
  display: block;
  margin-bottom: 5px;
  font-weight: 500;
}

.form-group input,
.form-group textarea {
  width: 100%;
  padding: 10px;
  border: 1px solid #ddd;
  border-radius: 5px;
  font-size: 14px;
}

.form-group input.error,
.form-group textarea.error {
  border-color: #dc3545;
}

.error {
  color: #dc3545;
  font-size: 12px;
  margin-top: 5px;
}

.btn-primary {
  background: #007bff;
  color: white;
  padding: 12px 24px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

.btn-ai {
  background: #28a745;
  color: white;
  padding: 10px 20px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  margin: 10px 0;
}

.btn-ai:disabled {
  background: #6c757d;
  cursor: not-allowed;
}

.roles-section {
  border: 1px solid #e9ecef;
  padding: 20px;
  border-radius: 5px;
  background: #f8f9fa;
}

.role-tag {
  display: inline-block;
  background: #007bff;
  color: white;
  padding: 5px 10px;
  margin: 5px;
  border-radius: 15px;
  font-size: 12px;
}

.role-tag.suggested {
  background: #28a745;
}

.role-tag button {
  background: none;
  border: none;
  color: white;
  margin-left: 5px;
  cursor: pointer;
}

.ai-results {
  background: #e7f3ff;
  padding: 15px;
  border-radius: 5px;
  margin-top: 10px;
}

.error-message {
  background: #f8d7da;
  color: #721c24;
  padding: 10px;
  border-radius: 5px;
  margin: 10px 0;
}
```

## INTEGRATION STEPS

1. **Install Dependencies**
   ```bash
   npm install axios
   ```

2. **Environment Setup**
   ```env
   REACT_APP_API_URL=http://localhost:2000
   ```

3. **Usage Example**
   ```javascript
   import IdeaFormContainer from './components/IdeaFormContainer';
   
   function App() {
     return (
       <div className="App">
         <IdeaFormContainer />
       </div>
     );
   }
   ```

## API REQUEST/RESPONSE EXAMPLES

### AI Analysis Request
```javascript
POST /api/ai/analyze-roles
{
  "description": "A mobile app that connects students with tutors for peer-to-peer learning sessions"
}
```

### AI Analysis Response
```javascript
{
  "success": true,
  "message": "AI analysis completed successfully",
  "data": {
    "roles": [
      "Mobile App Developer",
      "UI/UX Designer", 
      "Backend Developer",
      "Education Specialist",
      "Marketing Specialist"
    ],
    "aiGenerated": true,
    "analysisTime": "2024-01-23T10:30:00Z"
  }
}
```

## ERROR HANDLING

Common errors and handling:
- Rate limiting (429): Show retry message
- Invalid description (400): Validation error
- Service unavailable (500): Fallback to manual input
- Network errors: Retry mechanism

This implementation provides a complete two-layer workflow with seamless AI integration following your backend API structure.